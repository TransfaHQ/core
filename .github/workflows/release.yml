name: Release

on:
  push:
    branches:
      - main
      - ci/fix-release-security-check
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_API: transfa-api
  IMAGE_WEB: transfa-web

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.calver.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Generate CalVer version
        id: calver
        run: |
          # Get current year and month
          YEAR=$(date +%Y)
          MONTH=$(date +%m)

          git fetch --tags --force

          TAG_PREFIX="v${YEAR}.${MONTH}."
          EXISTING_TAGS=$( )

          MICRO=$((EXISTING_TAGS + 1))

          VERSION="${YEAR}.${MONTH}.${MICRO}"

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated CalVer version: ${VERSION}"
          echo "Found ${EXISTING_TAGS} existing tags for ${YEAR}.${MONTH}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for API image
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_API }}
          tags: |
            type=raw,value=${{ steps.calver.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=,format=short

      - name: Extract metadata for Web image
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_WEB }}
          tags: |
            type=raw,value=${{ steps.calver.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=,format=short

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.calver.outputs.version }}

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.calver.outputs.version }}

      - name: Output summary
        run: |
          echo "## Docker Images Built and Pushed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.calver.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_API }}:${{ steps.calver.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_WEB }}:${{ steps.calver.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tags:" >> $GITHUB_STEP_SUMMARY
          echo "- CalVer: \`${{ steps.calver.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Latest: \`latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- SHA: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Generate release notes
        id: release-notes
        run: |
          # Fetch tags
          git fetch --tags --force

          # Get the latest tag or use first commit if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)

          # Generate changelog from commits since last tag
          CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)

          # If no new commits, use a default message
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- Initial release"
          fi

          # Create release body
          cat > release_notes.md <<EOF
          ## Release v${{ needs.build-and-push.outputs.version }}

          ### Docker Images

          Pull the images using:

          \`\`\`bash
          # API (Backend)
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_API }}:${{ needs.build-and-push.outputs.version }}

          # Web (Frontend)
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_WEB }}:${{ needs.build-and-push.outputs.version }}
          \`\`\`

          ### What's Changed

          ${CHANGELOG}

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...v${{ needs.build-and-push.outputs.version }}

          ---

          **Commit SHA**: ${{ github.sha }}
          **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF

          echo "Release notes generated successfully"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-and-push.outputs.version }}
          name: v${{ needs.build-and-push.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  
