version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: transfa-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-transfa}
      POSTGRES_USER: ${DB_USERNAME:-transfa}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-transfa2025}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-transfa} -d ${DB_NAME:-transfa}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - transfa-network
    restart: unless-stopped

  # Backend API
  # NOTE: TigerBeetle should be deployed separately in production
  # See guides/TIGERBEETLE.md for deployment guidance
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: transfa-backend
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-transfa}
      DB_PASSWORD: ${DB_PASSWORD:-transfa2025}
      DB_NAME: ${DB_NAME:-transfa}
      CORE_POSTGRES_SCHEMA: ${CORE_POSTGRES_SCHEMA:-core}
      DB_MIGRATIONS_TABLE: ${DB_MIGRATIONS_TABLE:-core_migrations}
      DB_ENABLE_LOGGING: ${DB_ENABLE_LOGGING:-false}

      # TigerBeetle (External deployment required)
      # Set this to your TigerBeetle cluster addresses
      # Format: host1:port1,host2:port2,host3:port3
      TIGER_BEETLE_CLUSTER_ID: ${TIGER_BEETLE_CLUSTER_ID:-0}
      TIGER_BEETLE_REPLICAS_ADDRESSES: ${TIGER_BEETLE_REPLICAS_ADDRESSES:-tigerbeetle:3000}

      # Authentication
      ADMIN_SECRET: ${ADMIN_SECRET:-your_admin_secret_change_in_production}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_change_in_production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}

      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:5173,http://localhost:3001}

      # Application
      PORT: 3000
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - transfa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    container_name: transfa-frontend
    ports:
      - "5173:80"
    depends_on:
      - backend
    networks:
      - transfa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  transfa-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
