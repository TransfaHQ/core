version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: transfa-postgres-dev
    environment:
      POSTGRES_DB: ${DB_NAME:-transfa}
      POSTGRES_USER: ${DB_USERNAME:-transfa}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-transfa2025}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-transfa} -d ${DB_NAME:-transfa}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - transfa-dev-network

  # TigerBeetle (official Docker image for development)
  tigerbeetle:
    image: ghcr.io/tigerbeetle/tigerbeetle
    container_name: transfa-tigerbeetle-dev
    security_opt:
      - seccomp:unconfined
    cap_add:
      - IPC_LOCK
    command: >
      sh -c "
      if [ ! -f /data/0_0.tigerbeetle ]; then
        /tigerbeetle format --cluster=0 --replica=0 --replica-count=1 /data/0_0.tigerbeetle;
      fi &&
      /tigerbeetle start --addresses=0.0.0.0:6066 /data/0_0.tigerbeetle
      "
    volumes:
      - tigerbeetle_dev_data:/data
    ports:
      - "6066:6066"
    networks:
      - transfa-dev-network

  # Backend API (Development mode with hot-reload)
  backend:
    image: node:22-alpine
    container_name: transfa-backend-dev
    working_dir: /app
    command: sh -c "apk add --no-cache bash && npm install -g pnpm && pnpm install && pnpm run start:dev"
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-transfa}
      DB_PASSWORD: ${DB_PASSWORD:-transfa2025}
      DB_NAME: ${DB_NAME:-transfa}
      CORE_POSTGRES_SCHEMA: ${CORE_POSTGRES_SCHEMA:-core}
      DB_MIGRATIONS_TABLE: ${DB_MIGRATIONS_TABLE:-core_migrations}
      DB_ENABLE_LOGGING: ${DB_ENABLE_LOGGING:-true}

      # TigerBeetle
      TIGER_BEETLE_CLUSTER_ID: ${TIGER_BEETLE_CLUSTER_ID:-0}
      TIGER_BEETLE_REPLICAS_ADDRESSES: tigerbeetle:6066

      # Authentication
      ADMIN_SECRET: ${ADMIN_SECRET:-dev_admin_secret}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}

      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:5173,http://localhost:3001}

      # Application
      PORT: 3000
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      tigerbeetle:
        condition: service_started
    networks:
      - transfa-dev-network

  # Frontend (Development mode with hot-reload)
  frontend:
    image: node:22-alpine
    container_name: transfa-frontend-dev
    working_dir: /app
    command: sh -c "npm install && npm run dev -- --host"
    environment:
      # API URL - Use backend service name for Docker network
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - transfa-dev-network

networks:
  transfa-dev-network:
    driver: bridge

volumes:
  postgres_dev_data:
    driver: local
  tigerbeetle_dev_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local
