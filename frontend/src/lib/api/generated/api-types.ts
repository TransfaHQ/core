/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_createUser_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_login_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_createKey_v1"];
        delete: operations["AuthController_deleteKey_v1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ledgers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ledgers
         * @description Retrieves a paginated list of ledgers
         */
        get: operations["LedgerController_listLedgers_v1"];
        put?: never;
        /**
         * Create a new ledger
         * @description Creates a new ledger with the provided name and description
         */
        post: operations["LedgerController_createLedger_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ledgers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a ledger by ID
         * @description Retrieves a single ledger by its unique identifier
         */
        get: operations["LedgerController_retrieveLedger_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a ledger by ID
         * @description Updates an existing ledger by its unique identifier with the provided fields
         */
        patch: operations["LedgerController_updateLedger_v1"];
        trace?: never;
    };
    "/v0/ledgers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ledgers following Modern Treasury format
         * @description Retrieves a paginated list of ledgers
         */
        get: operations["MTLedgerController_listLegders_v0"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ledger_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ledger accounts
         * @description Retrieves a paginated list of ledger accounts
         */
        get: operations["LedgerAccountController_listAccounts_v1"];
        put?: never;
        /**
         * Create a new ledger account
         * @description Creates a new ledger account with the provided details
         */
        post: operations["LedgerAccountController_createLedgerAccount_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ledger_accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a ledger account by ID
         * @description Retrieves a single ledger account by its unique identifier
         */
        get: operations["LedgerAccountController_retrieveLedgerAccount_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a ledger account by ID
         * @description Updates an existing ledger account by its unique identifier with the provided fields
         */
        patch: operations["LedgerAccountController_updateLedgerAccount_v1"];
        trace?: never;
    };
    "/v1/currencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List currencies
         * @description Retrieves a paginated list of currencies
         */
        get: operations["CurrencyController_listCurrencies_v1"];
        put?: never;
        /**
         * Create a new currency
         * @description Creates a new currency with the provided details
         */
        post: operations["CurrencyController_createCurrency_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/currencies/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a currency by code
         * @description Retrieves a single currency by its code
         */
        get: operations["CurrencyController_getCurrency_v1"];
        put?: never;
        post?: never;
        /**
         * Delete a currency by code
         * @description Deletes a currency by its code. Cannot delete if ledger accounts are using it.
         */
        delete: operations["CurrencyController_deleteCurrency_v1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateUserDto: Record<string, never>;
        LoginDto: Record<string, never>;
        CreateKeyDto: Record<string, never>;
        DeleteKeyDto: Record<string, never>;
        CreateLedgerDto: {
            /**
             * @description Name of the ledger
             * @example Company General Ledger
             */
            name: string;
            /**
             * @description Description of the ledger purpose
             * @example Main accounting ledger for company operations
             */
            description?: string;
            /**
             * @description Additional data represented as key-value pairs. Both the key and value must be strings.
             * @example {
             *       "key": "currency",
             *       "value": "USD"
             *     }
             */
            metadata?: {
                [key: string]: string;
            };
        };
        LedgerResponseDto: {
            /**
             * @description Unique identifier for the ledger
             * @example 01234567-89ab-cdef-0123-456789abcdef
             */
            id: string;
            /**
             * @description Name of the ledger
             * @example Company General Ledger
             */
            name: string;
            /**
             * @description Description of the ledger purpose
             * @example Main accounting ledger for company operations
             */
            description: string;
            /**
             * @description Additional data represented as key-value pairs. Both the key and value must be strings.
             * @example {
             *       "key": "currency",
             *       "value": "USD"
             *     }
             */
            metadata?: {
                [key: string]: string;
            };
            /**
             * Format: date-time
             * @description Timestamp when the ledger was created
             * @example 2023-12-01T10:00:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp when the ledger was last updated
             * @example 2023-12-01T10:00:00Z
             */
            updatedAt: string;
        };
        UpdateLedgerDto: {
            /**
             * @description Name of the ledger
             * @example Company General Ledger
             */
            name?: string;
            /**
             * @description Description of the ledger purpose
             * @example Main accounting ledger for company operations
             */
            description?: string;
            /**
             * @description Additional data represented as key-value pairs. Both the key and value must be strings.
             * @example {
             *       "key": "currency",
             *       "value": "USD"
             *     }
             */
            metadata?: {
                [key: string]: string;
            };
        };
        CreateLedgerAccountDto: {
            /**
             * @description Ledger id associated with the ledger account
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            ledgerId: string;
            /**
             * @description Name of the ledger account
             * @example Company General Ledger
             */
            name: string;
            /**
             * @description Description of the ledger account purpose
             * @example Main accounting ledger account for company operations
             */
            description?: string;
            /**
             * @description Additional data represented as key-value pairs. Both the key and value must be strings.
             * @example {
             *       "currency": "USD",
             *       "region": "US"
             *     }
             */
            metadata?: {
                [key: string]: string;
            };
            /**
             * @description Currency code of the ledger account (ISO 4217)
             * @example USD
             */
            currency: string;
            /**
             * @description Exponent for the currency (e.g., 2 for USD cents). Required if the currency is not recognized.
             * @example 2
             */
            currencyExponent?: number;
            /**
             * @description Normal balance type for the ledger account
             * @example debit
             * @enum {string}
             */
            normalBalance: "credit" | "debit";
            /**
             * @description External identifier for the ledger account
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            externalId?: string;
        };
        BalanceDto: {
            /**
             * @description Total credits
             * @example 1000
             */
            credits: number;
            /**
             * @description Total debits
             * @example 500
             */
            debits: number;
            /**
             * @description Net amount
             * @example 500
             */
            amount: number;
            /**
             * @description Currency code (ISO 4217)
             * @example USD
             */
            currency: string;
            /**
             * @description Currency exponent (number of decimal places, e.g., 2 for USD)
             * @example 2
             */
            currencyExponent: number;
        };
        LedgerAccountBalancesDto: {
            /** @description Pending balance */
            pendingBalance: components["schemas"]["BalanceDto"];
            /** @description Posted balance */
            postedBalance: components["schemas"]["BalanceDto"];
            /** @description Available balance */
            avalaibleBalance: components["schemas"]["BalanceDto"];
        };
        LedgerAccountResponseDto: {
            /**
             * @description Ledger account unique identifier
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id: string;
            /**
             * @description Name of the ledger account
             * @example Company General Ledger
             */
            name: string;
            /**
             * @description Description of the ledger account
             * @example Main accounting ledger account
             */
            description: string;
            /**
             * @description Normal balance type
             * @example DEBIT
             */
            normalBalance: string;
            /**
             * @description Associated ledger ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            ledgerId: string;
            /**
             * @description External identifier for the ledger account
             * @example EXT-12345
             */
            externalId: string;
            /** @description Balances of the ledger account */
            balances: components["schemas"]["LedgerAccountBalancesDto"];
            /**
             * @description Additional data represented as key-value pairs. Both the key and value must be strings.
             * @example {
             *       "key": "currency",
             *       "value": "USD"
             *     }
             */
            metadata?: {
                [key: string]: string;
            };
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2025-09-23T21:48:11.869Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2025-09-23T21:48:11.869Z
             */
            updatedAt: string;
        };
        UpdateLedgerAccountDto: {
            /**
             * @description Name of the ledger account
             * @example Company General Ledger
             */
            name?: string;
            /**
             * @description Description of the ledger account purpose
             * @example Main accounting ledger account for company operations
             */
            description?: string;
            /**
             * @description Additional data represented as key-value pairs. Both the key and value must be strings.
             * @example {
             *       "currency": "USD",
             *       "region": "US"
             *     }
             */
            metadata?: {
                [key: string]: string;
            };
        };
        CreateCurrencyDto: {
            /**
             * @description Currency code (e.g., USD, EUR, BTC)
             * @example BTC
             */
            code: string;
            /**
             * @description Number of decimal places for the currency
             * @example 8
             */
            exponent: number;
            /**
             * @description Full name of the currency
             * @example Bitcoin
             */
            name: string;
        };
        CurrencyResponseDto: {
            /**
             * @description Unique identifier of the currency
             * @example 1
             */
            id: number;
            /**
             * @description Currency code
             * @example USD
             */
            code: string;
            /**
             * @description Number of decimal places for the currency
             * @example 2
             */
            exponent: number;
            /**
             * @description Full name of the currency
             * @example US Dollar
             */
            name: string;
            /**
             * Format: date-time
             * @description When the currency was created
             * @example 2023-01-01T00:00:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description When the currency was last updated
             * @example 2023-01-01T00:00:00Z
             */
            updatedAt: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_createUser_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_createKey_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateKeyDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_deleteKey_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteKeyDto"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LedgerController_listLedgers_v1: {
        parameters: {
            query?: {
                /** @description Number of items per page */
                limit?: number;
                /** @description Cursor for pagination */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The ledgers have been successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LedgerResponseDto"][];
                        /**
                         * @description Cursor for the next page
                         * @example 01234567-89ab-cdef-0123-456789abcdef
                         */
                        nextCursor?: string;
                        /**
                         * @description Cursor for the previous page
                         * @example 01234567-89ab-cdef-0123-456789abcdef
                         */
                        prevCursor?: string;
                        /** @description Whether there are more items after this page */
                        hasNext?: boolean;
                        /** @description Whether there are more items before this page */
                        hasPrev?: boolean;
                    };
                };
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LedgerController_createLedger_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLedgerDto"];
            };
        };
        responses: {
            /** @description The ledger has been successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LedgerResponseDto"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LedgerController_retrieveLedger_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the ledger */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The ledger has been successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LedgerResponseDto"];
                };
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ledger not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LedgerController_updateLedger_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the ledger to update */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLedgerDto"];
            };
        };
        responses: {
            /** @description The ledger has been successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LedgerResponseDto"];
                };
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ledger not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MTLedgerController_listLegders_v0: {
        parameters: {
            query?: {
                /** @description Number of items to return per page */
                limit?: number;
                /** @description Cursor for cursor-based pagination */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The ledgers have been successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LedgerResponseDto"][];
                };
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LedgerAccountController_listAccounts_v1: {
        parameters: {
            query?: {
                /** @description Number of items per page */
                limit?: number;
                /** @description Cursor for pagination */
                cursor?: string;
                /** @description Filter by ledger ID */
                ledger_id?: string;
                /** @description Filter by currency code */
                currency?: string;
                /** @description Filter by normal balance type */
                normal_balance?: "credit" | "debit";
                /** @description Search by account name, description, or external ID */
                search?: string;
                /** @description Filter by metadata key/value pairs using Stripe convention: ?metadata[key]=value */
                metadata?: {
                    [key: string]: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The ledger accounts have been successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LedgerAccountResponseDto"][];
                        /**
                         * @description Cursor for the next page
                         * @example 01234567-89ab-cdef-0123-456789abcdef
                         */
                        nextCursor?: string;
                        /**
                         * @description Cursor for the previous page
                         * @example 01234567-89ab-cdef-0123-456789abcdef
                         */
                        prevCursor?: string;
                        /** @description Whether there are more items after this page */
                        hasNext?: boolean;
                        /** @description Whether there are more items before this page */
                        hasPrev?: boolean;
                    };
                };
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LedgerAccountController_createLedgerAccount_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLedgerAccountDto"];
            };
        };
        responses: {
            /** @description The ledger account has been successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LedgerAccountResponseDto"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LedgerAccountController_retrieveLedgerAccount_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier or externalId of the ledger account */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The ledger account has been successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LedgerAccountResponseDto"];
                };
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ledger account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LedgerAccountController_updateLedgerAccount_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the ledger account to update */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLedgerAccountDto"];
            };
        };
        responses: {
            /** @description The ledger account has been successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LedgerAccountResponseDto"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ledger account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CurrencyController_listCurrencies_v1: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
                /** @description Filter by currency code (partial match) */
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The currencies have been successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CurrencyResponseDto"][];
                        /** @description Total number of currencies */
                        total?: number;
                        /** @description Current page number */
                        page?: number;
                        /** @description Items per page */
                        limit?: number;
                        /** @description Total number of pages */
                        totalPages?: number;
                    };
                };
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CurrencyController_createCurrency_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCurrencyDto"];
            };
        };
        responses: {
            /** @description The currency has been successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrencyResponseDto"];
                };
            };
            /** @description Invalid input data or currency code already exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CurrencyController_getCurrency_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Currency code (e.g., USD, EUR) */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The currency has been successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrencyResponseDto"];
                };
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Currency not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CurrencyController_deleteCurrency_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Currency code to delete */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The currency has been successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Currency is being used by ledger accounts and cannot be deleted */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Currency not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
