/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_createUser_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_login_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_createKey_v1"];
        delete: operations["AuthController_deleteKey_v1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ledgers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ledgers
         * @description Retrieves a paginated list of ledgers
         */
        get: operations["LedgerController_listLegders_v1"];
        put?: never;
        /**
         * Create a new ledger
         * @description Creates a new ledger with the provided name and description
         */
        post: operations["LedgerController_createLedger_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ledgers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a ledger by ID
         * @description Retrieves a single ledger by its unique identifier
         */
        get: operations["LedgerController_retrieveLedger_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateUserDto: Record<string, never>;
        LoginDto: Record<string, never>;
        CreateKeyDto: Record<string, never>;
        DeleteKeyDto: Record<string, never>;
        CreateLedgerDto: {
            /**
             * @description Name of the ledger
             * @example Company General Ledger
             */
            name: string;
            /**
             * @description Description of the ledger purpose
             * @example Main accounting ledger for company operations
             */
            description?: string;
        };
        LedgerResponseDto: {
            /**
             * @description Unique identifier for the ledger
             * @example 01234567-89ab-cdef-0123-456789abcdef
             */
            id: string;
            /**
             * @description Name of the ledger
             * @example Company General Ledger
             */
            name: string;
            /**
             * @description Description of the ledger purpose
             * @example Main accounting ledger for company operations
             */
            description: string;
            /**
             * Format: date-time
             * @description Timestamp when the ledger was created
             * @example 2023-12-01T10:00:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp when the ledger was last updated
             * @example 2023-12-01T10:00:00Z
             */
            updatedAt: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_createUser_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_createKey_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateKeyDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_deleteKey_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteKeyDto"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LedgerController_listLegders_v1: {
        parameters: {
            query?: {
                /** @description Number of items to return per page */
                limit?: number;
                /** @description Page number for pagination (1-based) */
                page?: number;
                /** @description Cursor for cursor-based pagination */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The ledgers have been successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LedgerResponseDto"][];
                        /**
                         * @description Cursor for the next page
                         * @example 01234567-89ab-cdef-0123-456789abcdef
                         */
                        nextCursor?: string;
                        /**
                         * @description Cursor for the previous page
                         * @example 01234567-89ab-cdef-0123-456789abcdef
                         */
                        prevCursor?: string;
                        /** @description Whether there are more items after this page */
                        hasNext?: boolean;
                        /** @description Whether there are more items before this page */
                        hasPrev?: boolean;
                    };
                };
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LedgerController_createLedger_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLedgerDto"];
            };
        };
        responses: {
            /** @description The ledger has been successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LedgerResponseDto"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LedgerController_retrieveLedger_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the ledger */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The ledger has been successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LedgerResponseDto"];
                };
            };
            /** @description Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ledger not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
